type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/antifraud/repository/PrivilegeRepository.kt
  visible: true
  text: |-
    package antifraud.repository

    import antifraud.model.Privilege
    import org.springframework.data.jpa.repository.JpaRepository
    import org.springframework.stereotype.Repository
    import java.util.Optional

    @Repository
    interface PrivilegeRepository : JpaRepository<Privilege, Long> {
        fun findByName(name: String?): Optional<Privilege>
    }
  learner_created: true
- name: src/antifraud/security/SecurityConfig.kt
  visible: true
  text: |-
    package antifraud.security

    import antifraud.service.SecurityUserDetailsService
    import jakarta.servlet.http.HttpServletRequest
    import jakarta.servlet.http.HttpServletResponse
    import org.springframework.context.annotation.Bean
    import org.springframework.context.annotation.Configuration
    import org.springframework.security.access.hierarchicalroles.RoleHierarchy
    import org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider
    import org.springframework.security.config.annotation.web.builders.HttpSecurity
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
    import org.springframework.security.web.SecurityFilterChain


    @Configuration
    open class SecurityConfig(
        private val securityUserDetailsService: SecurityUserDetailsService,
    ) {
        @Bean
        open fun authenticationProvider(): DaoAuthenticationProvider {
            return DaoAuthenticationProvider().apply {
                setUserDetailsService(securityUserDetailsService)
                setPasswordEncoder(bCryptPasswordEncoder())
            }
        }

        @Bean
        open fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {
            return http.csrf().disable().headers().frameOptions().disable().and().authorizeHttpRequests { authorize ->
                authorize.requestMatchers("/api/auth/user").permitAll()
                authorize.requestMatchers("/api/auth/user/**").hasAuthority("ADMIN_PRIVILEGE")
                authorize.requestMatchers("/api/auth/role/**").hasAuthority("ADMIN_PRIVILEGE")
                authorize.requestMatchers("/api/auth/access/**").hasAuthority("ADMIN_PRIVILEGE")
                authorize.requestMatchers("/api/auth/list/**").hasAuthority("LIST_USER_PRIVILEGE")
                authorize.requestMatchers("/api/antifraud/suspicious-ip").hasAuthority("SUSPICIOUS_IP_PRIVILEGE")
                authorize.requestMatchers("/api/antifraud/suspicious-ip/**").hasAuthority("SUSPICIOUS_IP_PRIVILEGE")
                authorize.requestMatchers("/api/antifraud/stolencard/**").hasAuthority("STOLEN_CARD_PRIVILEGE")
                authorize.requestMatchers("/api/antifraud/transaction/**").hasAuthority("CHECK_TRANSACTION_PRIVILEGE")
                authorize.requestMatchers("/actuator/shutdown").permitAll()
                authorize.requestMatchers("/h2-console/**").permitAll()
                authorize.anyRequest().authenticated()
            }.httpBasic()
                .authenticationEntryPoint { _: HttpServletRequest?, response: HttpServletResponse?, authException: org.springframework.security.core.AuthenticationException? ->
                    response?.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException?.message)
                }.and().authenticationProvider(authenticationProvider()).build()
        }

        companion object {
            @Bean
            fun bCryptPasswordEncoder(): BCryptPasswordEncoder {
                return BCryptPasswordEncoder()
            }

            @Bean
            fun roleHierarchy(): RoleHierarchy {
                val roleHierarchy = RoleHierarchyImpl()
                val hierarchy = """
                """.trimIndent()
                roleHierarchy.setHierarchy(hierarchy)
                return roleHierarchy
            }
        }
    }
  learner_created: true
- name: src/antifraud/model/Privilege.kt
  visible: true
  text: |-
    package antifraud.model

    import jakarta.persistence.*
    import org.hibernate.annotations.CreationTimestamp
    import org.hibernate.annotations.UpdateTimestamp
    import java.sql.Timestamp


    @Entity
    class Privilege(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) var id: Long? = null,
        @Column(name = "name", nullable = false) var name: String? = null,

        @ManyToMany(mappedBy = "privileges") var roles: MutableList<Role>? = null,

        @CreationTimestamp @Temporal(TemporalType.TIMESTAMP)  @Column(name = "created_at", nullable = false) var createdAt: Timestamp? = null,
        @UpdateTimestamp @Temporal(TemporalType.TIMESTAMP)   @Column(name = "updated_at", nullable = false) var updatedAt: Timestamp? = null,
    )
  learner_created: true
- name: src/antifraud/service/SecurityUserDetailsService.kt
  visible: true
  text: |+
    package antifraud.service

    import antifraud.model.Privilege
    import antifraud.model.Role
    import org.springframework.security.core.GrantedAuthority
    import org.springframework.security.core.authority.SimpleGrantedAuthority
    import org.springframework.security.core.userdetails.User
    import org.springframework.security.core.userdetails.UserDetails
    import org.springframework.security.core.userdetails.UserDetailsService
    import org.springframework.stereotype.Component
    import java.util.stream.Collectors

    @Component
    class SecurityUserDetailsService(
        private val userService: UserService,
    ) : UserDetailsService {
        override fun loadUserByUsername(username: String): UserDetails {
            val user = userService.findByUsername(username) ?: return org.springframework.security.core.userdetails.User(
                " ", " ", true, true, true, true, getAuthorities(listOf(Role(name = "ROLE_USER")))
            )
            return User(user.username,
                user.password,
                user.enabled,
                user.accountNonExpired,
                user.credentialsNonExpired,
                user.accountNonLocked,
                user.roles?.let { getAuthorities(it) }
            )
        }

        private fun getAuthorities(roles: Collection<Role>): MutableList<GrantedAuthority> {
            return getGrantedAuthorities(getPrivileges(roles))
        }

        private fun getPrivileges(roles: Collection<Role>): MutableList<String?> {
            val privileges: MutableList<String?> = mutableListOf()
            val collection: MutableList<Privilege> = mutableListOf()
            for (role in roles) {
                privileges.add(role.name)
                role.privileges?.let { collection.addAll(it) }
            }
            for (item in collection) {
                privileges.add(item.name)
            }
            return privileges
        }

        private fun getGrantedAuthorities(privileges: MutableList<String?>): MutableList<GrantedAuthority> {
            return privileges.stream().map { privilege: String? -> SimpleGrantedAuthority(privilege) }
                .collect(Collectors.toList())
        }
    }


  learner_created: true
- name: src/antifraud/dto/IpDTO.kt
  visible: true
  text: |-
    package antifraud.dto

    import antifraud.model.Ip
    import antifraud.util.IpAddressUtil
    import jakarta.validation.constraints.*
    import org.modelmapper.ModelMapper

    data class IpDTO(
        var id: Long? = null,

        @field:NotNull @field:NotBlank @field:NotEmpty
        @field:Pattern(regexp =IpAddressUtil.IPV4_REGEX)
        var ip: String? = null,
    ) {
        companion object {
            fun fromEntity(ip: Ip): IpDTO =
                ModelMapper().map(ip, IpDTO::class.java)

            fun toEntity(ipDTO: IpDTO): Ip =
                ModelMapper().map(ipDTO, Ip::class.java)
        }
    }
  learner_created: true
- name: src/antifraud/util/LockOperationSet.kt
  visible: true
  text: |-
    package antifraud.util

    enum class LockOperationSet(val state: Boolean) { LOCK(false), UNLOCK(true) }
  learner_created: true
- name: src/antifraud/service/CardService.kt
  visible: true
  text: |-
    package antifraud.service

    import antifraud.model.Card
    import antifraud.repository.CardRepository
    import org.springframework.stereotype.Service
    import kotlin.jvm.optionals.getOrNull

    @Service
    class CardService(
        private val cardRepository: CardRepository,
    ) {
        fun save(card: Card): Card = cardRepository.save(card)
        fun findByNumber(number: String): Card? = cardRepository.findByNumber(number).getOrNull()
        fun existByNumber(number: String): Boolean = cardRepository.existsByNumber(number)

        fun delete(card: Card) = cardRepository.delete(card)
        fun findAll(): MutableList<Card> = cardRepository.findAll()
    }
  learner_created: true
- name: src/antifraud/dto/CardDTO.kt
  visible: true
  text: |-
    package antifraud.dto

    import antifraud.model.Card
    import jakarta.validation.constraints.NotBlank
    import jakarta.validation.constraints.NotEmpty
    import jakarta.validation.constraints.NotNull
    import jakarta.validation.constraints.Size
    import org.modelmapper.ModelMapper


    data class CardDTO(
        var id: Long? = null,

        @field:NotNull @field:NotBlank @field:NotEmpty @field:Size(min = 16, max = 16)
        var number: String? = null,
    ) {
        companion object {
            fun toEntity(cardDTO: CardDTO): Card =
                ModelMapper().map(cardDTO, Card::class.java)

            fun fromEntity(card: Card): CardDTO = ModelMapper().map(card, CardDTO::class.java)
        }
    }
  learner_created: true
- name: src/antifraud/controller/UserController.kt
  visible: true
  text: |-
    package antifraud.controller

    import antifraud.dto.LockUserDto
    import antifraud.dto.NewUserDTO
    import antifraud.dto.UserDTO
    import antifraud.util.RoleSet
    import antifraud.service.RoleService
    import antifraud.service.UserService
    import antifraud.util.LockOperationSet
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.DeleteMapping
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PathVariable
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.PutMapping
    import org.springframework.web.bind.annotation.RequestBody
    import org.springframework.web.bind.annotation.RestController
    import java.net.URI

    @RestController
    class UserController(
        private val userService: UserService,
        private val roleService: RoleService,

        ) {
        private var alreadySetup = false

        @PostMapping("/api/auth/user")
        fun createUser(@RequestBody newUserDto: NewUserDTO): ResponseEntity<Any> {
            if (userService.count() == 0L) {
                return ResponseEntity.created(URI.create("/api/auth/user"))
                    .body(UserDTO.fromEntity(userService.save(NewUserDTO.toEntity(newUserDto).apply {
                        this.roles = mutableSetOf(roleService.findByName("ADMINISTRATOR").get())
                        this.accountNonLocked = true
                        alreadySetup = true
                    })))
            }

            if (userService.existByUsername(newUserDto.username)) {
                return ResponseEntity.status(409).body("username already exists")
            }
            return ResponseEntity.created(URI.create("/api/auth/user"))
                .body(UserDTO.fromEntity(userService.save(NewUserDTO.toEntity(newUserDto).apply {
                    this.roles = mutableSetOf(roleService.findByName("MERCHANT").get())
                })))
        }

        @GetMapping("/api/auth/list")
        fun listUsers(): ResponseEntity<Any> {
            return ResponseEntity.ok(
                userService.listUsers().map(UserDTO::fromEntity)
            )
        }

        @DeleteMapping("/api/auth/user/{username}")
        fun deleteUser(@PathVariable username: String): ResponseEntity<Any> {
            if (!userService.existByUsername(username)) {
                return ResponseEntity.notFound().build()
            }

            val user = userService.findByUsername(username) ?: return ResponseEntity.notFound().build()
            if (user.roles?.contains(roleService.findByName("ADMINISTRATOR").get()) == true) {
                return ResponseEntity.status(403).body("Cannot delete administrator")
            }

            userService.deleteUser(username)
            return ResponseEntity.ok(mapOf("username" to username, "status" to "Deleted successfully!"))
        }

        @PutMapping("/api/auth/role")
        fun setRole(@RequestBody userDto: UserDTO): ResponseEntity<Any> {
            if (userDto.role == null || userDto.role?.uppercase() !in RoleSet.entries.map { it.name }) {
                return ResponseEntity.badRequest().build()
            }

            val role = userDto.role?.let { roleService.findByName(it).get() } ?: return ResponseEntity.badRequest().build()
            val user =
                userDto.username?.let { userService.findByUsername(it) } ?: return ResponseEntity.notFound().build()


            if (user.roles?.contains(role) == true) {
                return ResponseEntity.status(409).body("user already has this role")
            }

            userService.setRole(user, role).apply {
                UserDTO.fromEntity(user).apply {
                    return ResponseEntity.ok(this)
                }
            }
        }

        @PutMapping("/api/auth/access")
        fun enableUser(@RequestBody lockUserDto: LockUserDto): ResponseEntity<Any> {
            if (lockUserDto.username == null || lockUserDto.operation == null || lockUserDto.operation !in LockOperationSet.entries.map { it.name }) {
                return ResponseEntity.badRequest().build()
            }

            val nonLocked = lockUserDto.operation?.let { LockOperationSet.valueOf(it).state }
                ?: return ResponseEntity.badRequest().build()
            val user = userService.findByUsername(lockUserDto.username!!) ?: return ResponseEntity.notFound().build()

            if (user.accountNonLocked == nonLocked) {
                return ResponseEntity.status(409).body("user already has this status")
            }

            userService.setAccess(user, nonLocked).apply {
                return ResponseEntity.ok(
                    mapOf("status" to "User ${user.username} ${if (user.accountNonLocked) "UNLOCKED" else "LOCKED"}!")
                )
            }
        }
    }
  learner_created: true
- name: src/antifraud/util/IpAddressUtil.kt
  visible: true
  text: |-
    package antifraud.util

    import java.util.*

    class IpAddressUtil {

        companion object {
            const val IPV4_REGEX =
                "(\\d{1,2}|[01]\\d{2}|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|[01]\\d{2}|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|[01]\\d{2}|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|[01]\\d{2}|2[0-4]\\d|25[0-5])"

            private fun toNumeric(ip: String?): Long {
                if (ip == null) {
                    return 0
                }
                val sc: Scanner = Scanner(ip).useDelimiter("\\.")
                val l: Long = ((sc.nextLong() shl 24) + (sc.nextLong() shl 16) + (sc.nextLong() shl 8) + sc.nextLong())
                sc.close()
                return l
            }

            var ipComparator: Comparator<String?> = Comparator { ip1, ip2 ->
                toNumeric(ip1).compareTo(toNumeric(ip2))
            }
        }
    }
  learner_created: true
- name: src/antifraud/repository/IpRepository.kt
  visible: true
  text: |-
    package antifraud.repository

    import antifraud.model.Ip
    import org.springframework.data.jpa.repository.JpaRepository
    import org.springframework.stereotype.Repository
    import java.util.Optional

    @Repository
    interface IpRepository : JpaRepository<Ip, Long> {
        fun findByIp(ip: String): Optional<Ip>
        fun existsByIp(ip: String): Boolean
    }
  learner_created: true
- name: src/antifraud/service/RoleService.kt
  visible: true
  text: |-
    package antifraud.service

    import antifraud.repository.RoleRepository
    import org.springframework.stereotype.Service

    @Service
    class RoleService(
        private val roleRepository: RoleRepository
    ) {
        fun findByName(name: String) = roleRepository.findByName(name)

    }
  learner_created: true
- name: src/antifraud/model/User.kt
  visible: true
  text: |+
    package antifraud.model

    import jakarta.persistence.*

    /**
     * User entity
     *
     * @author Ahmed Hosny
     * @version 1.0
     * @since 2023-04-07
     */
    @Entity(name = "users")
    class User(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "id", nullable = false) var id: Long? = null,
        @Column(name = "username", nullable = false) var username: String? = null,
        @Column(name = "password", nullable = false) var password: String? = null,
        @Column(name = "name", nullable = false) var name: String? = null,
        @Column(name = "enabled", nullable = false) var enabled: Boolean = true,
        @Column(name = "accountNonExpired", nullable = false) var accountNonExpired: Boolean = true,
        @Column(name = "accountNonLocked", nullable = false) var accountNonLocked: Boolean = false,
        @Column(name = "credentialsNonExpired", nullable = false) var credentialsNonExpired: Boolean = true,


        @ManyToMany(fetch = FetchType.EAGER) @JoinTable(
            name = "users_roles",
            joinColumns = [JoinColumn(name = "user_id", referencedColumnName = "id")],
            inverseJoinColumns = [JoinColumn(name = "role_id", referencedColumnName = "id")],
        ) var roles: MutableSet<Role>? = null,

        //todo solve issue of timestamp with transactional annotation methods
    //    @CreationTimestamp @Temporal(TemporalType.TIMESTAMP)  @Column(name = "created_at", nullable = false) var createdAt: Timestamp? = null,
    //    @UpdateTimestamp @Temporal(TemporalType.TIMESTAMP)   @Column(name = "updated_at", nullable = false) var updatedAt: Timestamp? = null,
    )

  learner_created: true
- name: src/antifraud/controller/StolenCardController.kt
  visible: true
  text: |-
    package antifraud.controller

    import antifraud.dto.CardDTO
    import antifraud.service.CardService
    import antifraud.util.CardNumberValidator
    import jakarta.validation.constraints.NotBlank
    import jakarta.validation.constraints.NotEmpty
    import jakarta.validation.constraints.NotNull
    import jakarta.validation.constraints.Size
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.DeleteMapping
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PathVariable
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.RequestBody
    import org.springframework.web.bind.annotation.RestController

    @RestController
    class StolenCardController(
        private val cardService: CardService,
    ) {
        @PostMapping("/api/antifraud/stolencard")
        fun addStolenCard(@RequestBody cardDTO: CardDTO): ResponseEntity<Any> {
            if (cardDTO.number?.let { CardNumberValidator.isValid(it) } == false) {
                return ResponseEntity.badRequest().body("invalid card number")
            }

            if (cardDTO.number?.let { cardService.existByNumber(it) } == true) {
                return ResponseEntity.status(409).body("card already exists")
            }

            return ResponseEntity.ok(
                CardDTO.fromEntity(cardService.save(CardDTO.toEntity(cardDTO)))
            )
        }

        @GetMapping("/api/antifraud/stolencard")
        fun listStolenCards(): ResponseEntity<Any> =
            ResponseEntity.ok(cardService.findAll().sortedBy { it.id }.map { CardDTO.fromEntity(it) })


        @DeleteMapping("/api/antifraud/stolencard/{number}")
        fun deleteCard(
            @NotNull @NotBlank @NotEmpty @Size(min = 16, max = 16) @PathVariable number: String
        ): ResponseEntity<Any> {
            if (!CardNumberValidator.isValid(number)) {
                return ResponseEntity.badRequest().body("invalid card number")
            }

            val card = cardService.findByNumber(number)
            if (card != null) {
                cardService.delete(card)
                return ResponseEntity.ok().body(
                    mapOf("status" to "Card ${card.number} successfully removed!")
                )
            }

            return ResponseEntity.notFound().build()
        }
    }
  learner_created: true
- name: src/antifraud/exception/ControllerExceptionHandler.kt
  visible: true
  text: |-
    package antifraud.exception

    import jakarta.validation.ConstraintViolationException
    import jakarta.validation.ValidationException
    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.http.converter.HttpMessageNotReadableException
    import org.springframework.security.core.userdetails.UsernameNotFoundException
    import org.springframework.web.bind.annotation.ControllerAdvice
    import org.springframework.web.bind.annotation.ExceptionHandler
    import org.springframework.web.bind.annotation.ResponseBody
    import org.springframework.web.bind.annotation.ResponseStatus

    /**
     * This class handles exceptions thrown by the controllers
     * @author Ahmed Hosny
     * @version 1.0
     * @since 2023-04-07
     */
    @ControllerAdvice
    class ControllerExceptionHandler {
        /**
         * when trying to save an invalid item
         *
         * @return 400 (Bad Request)
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(ValidationException::class)
        fun exceptionHandler(ignored: ValidationException?): ResponseEntity<Any> {
            return ResponseEntity.badRequest().build()
        }

        /**
         * when ConstraintViolationException is thrown
         *
         * @return 400 (Bad Request)
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(
            ConstraintViolationException::class
        )
        fun exceptionHandler(ignored: ConstraintViolationException?): ResponseEntity<Any> {
            return ResponseEntity.badRequest().build()
        }

        /**
         * when a user tries to register with an existing username
         *
         * @return 409 (Conflict)
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(UsernameNotFoundException::class)
        fun exceptionHandler(ignored: UsernameNotFoundException?): ResponseEntity<Any> {
            return ResponseEntity.status(409).build()
        }


        /**
         * JSON parse error
         *
         * @return 409 (Conflict)
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(HttpMessageNotReadableException::class)
        fun exceptionHandler(ignored: HttpMessageNotReadableException?): ResponseEntity<Any> {
            return ResponseEntity.badRequest().build()
        }
    }
  learner_created: true
- name: src/antifraud/util/RoleSet.kt
  visible: true
  text: |-
    package antifraud.util

    enum class RoleSet {
        MERCHANT,SUPPORT
    }
  learner_created: true
- name: src/antifraud/service/UserService.kt
  visible: true
  text: |-
    package antifraud.service

    import antifraud.security.SecurityConfig
    import antifraud.model.Role
    import antifraud.model.User
    import antifraud.repository.UserRepository
    import org.springframework.stereotype.Service
    import org.springframework.transaction.annotation.Transactional
    import kotlin.jvm.optionals.getOrNull

    @Service
    @Transactional
    class UserService(
        private val userRepository: UserRepository,
    )  {
         fun save(user: User): User {
            user.password = SecurityConfig.bCryptPasswordEncoder().encode(user.password)
            return userRepository.save(user)
        }

         fun existByUsername(username: String) = userRepository.existsByUsername(username)
         fun listUsers(): MutableList<User> = userRepository.findAll()

        @Transactional
         fun deleteUser(username: String): Unit? =
            findByUsername(username)?.let { userRepository.delete(it) }

         fun count() = userRepository.count()

        @Transactional
         fun setRole(user: User, role: Role) {
            if (user.roles.isNullOrEmpty()) {
                user.roles = mutableSetOf()
            }
            user.roles = mutableSetOf(role)
            userRepository.save(user)
        }

        @Transactional
         fun setAccess(user: User, nonLocked: Boolean) {
            user.accountNonLocked = nonLocked
            userRepository.save(user)
        }

         fun findByUsername(username: String) = userRepository.findByUsername(username).getOrNull()
    }
  learner_created: true
- name: src/antifraud/repository/UserRepository.kt
  visible: true
  text: |-
    package antifraud.repository

    import antifraud.model.User
    import jakarta.transaction.Transactional
    import org.springframework.data.jpa.repository.JpaRepository
    import org.springframework.stereotype.Repository
    import java.util.*

    @Repository
    @Transactional(Transactional.TxType.MANDATORY)
    interface UserRepository : JpaRepository<User, Long> {
        fun findByUsername(username: String): Optional<User>
        fun existsByUsername(username: String): Boolean
    }
  learner_created: true
- name: src/antifraud/model/Role.kt
  visible: true
  text: |-
    package antifraud.model

    import jakarta.persistence.*
    import org.hibernate.annotations.CreationTimestamp
    import org.hibernate.annotations.UpdateTimestamp
    import java.sql.Timestamp


    @Entity
    class Role(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) var id: Long? = null,

        var name: String? = null,

        @ManyToMany(mappedBy = "roles") val users: Collection<User>? = null,

        @ManyToMany(fetch = FetchType.EAGER) @JoinTable(
            name = "roles_privileges",
            joinColumns = [JoinColumn(name = "role_id", referencedColumnName = "id")],
            inverseJoinColumns = [JoinColumn(name = "privilege_id", referencedColumnName = "id")]
        ) var privileges: MutableSet<Privilege>? = null,

        @CreationTimestamp @Temporal(TemporalType.TIMESTAMP)  @Column(name = "created_at", nullable = false) var createdAt: Timestamp? = null,
        @UpdateTimestamp @Temporal(TemporalType.TIMESTAMP)   @Column(name = "updated_at", nullable = false) var updatedAt: Timestamp? = null,
    )
  learner_created: true
- name: src/antifraud/util/LuhnAlgorithm.java
  visible: true
  text: |
    package antifraud.util;

    import java.util.ArrayList;

    public class LuhnAlgorithm {
        private LuhnAlgorithm() {
        }

        private static final int CARD_NUMBER_LENGTH = 16;
        private static final int UTF_ZERO = 48;

        private static final int LUHN_MODULUS = 10;
        private static final int LUHN_MULTIPLY = 2;
        private static final int LUHN_SUBTRACTION = 9;
        private static final int LUHN_LIMIT = 9;

        static int createCardCheckSum(String cardNumBuilder) {
            int sum = sumLuhnDigits(cardNumBuilder);
            return sum % LUHN_MODULUS == 0 ? 0 : LUHN_MODULUS - sum % LUHN_MODULUS;
        }

        static boolean checksum(String inputCardNum) {
            int checksum = inputCardNum.charAt(inputCardNum.length() - 1) - UTF_ZERO;
            if (checksum == 0) {
                return checksum == sumLuhnDigits(inputCardNum) % 10;
            } else {
                return checksum == 10 - sumLuhnDigits(inputCardNum) % 10;
            }
        }

        private static int sumLuhnDigits(String cardNUm) {
            ArrayList<Integer> digits = new ArrayList<>();
            int i = 0;
            while (i < CARD_NUMBER_LENGTH - 1) {
                digits.add(cardNUm.charAt(i) - UTF_ZERO);
                i++;
            }

            for (int j = 0; j < digits.size(); j += 2) {
                int multi2Sub9 = digits.get(j) * LUHN_MULTIPLY <= LUHN_LIMIT ? digits.get(j) * LUHN_MULTIPLY : digits.get(j) * LUHN_MULTIPLY - LUHN_SUBTRACTION;
                digits.set(j, multi2Sub9);
            }
            return digits.stream().mapToInt(d -> d).sum();
        }
    }
  learner_created: true
- name: src/antifraud/controller/SuspiciousIpController.kt
  visible: true
  text: |-
    package antifraud.controller

    import antifraud.dto.IpDTO
    import antifraud.service.IpService
    import antifraud.util.IpAddressUtil
    import jakarta.validation.Valid
    import jakarta.validation.constraints.Pattern
    import org.springframework.http.ResponseEntity
    import org.springframework.validation.annotation.Validated
    import org.springframework.web.bind.annotation.*

    @RestController
    @Validated
    class SuspiciousIpController(
        private val ipService: IpService
    ) {
        @PostMapping("/api/antifraud/suspicious-ip")
        fun blockIp(@Valid @RequestBody ipDTO: IpDTO): ResponseEntity<Any> {
            if (ipDTO.ip?.let { ipService.existsByIp(it) } == true) {
                return ResponseEntity.status(409).body("ip already exists")
            }

            return ResponseEntity.ok().body(
                IpDTO.fromEntity(
                    ipService.save(IpDTO.toEntity(ipDTO).apply { blocked = true })
                )
            )
        }

        @DeleteMapping("/api/antifraud/suspicious-ip/{ip}")
        fun unblockIp(
            @Pattern(regexp = IpAddressUtil.IPV4_REGEX)
            @PathVariable ip: String
        ): ResponseEntity<Any> {
            val ipAddress = ipService.findByIp(ip) ?: return ResponseEntity.notFound().build()

            ipService.delete(ipAddress).apply {
                return ResponseEntity.ok(mapOf("status" to "IP ${ipAddress.ip} successfully removed!"))
            }
        }

        @GetMapping("/api/antifraud/suspicious-ip")
        fun listBlockedIpAddresses(): ResponseEntity<Any> =
            ResponseEntity.ok(ipService.findAll().sortedBy { it.id }.map { IpDTO.fromEntity(it) })
    }
  learner_created: true
- name: src/antifraud/security/SecurityUserDetails.kt
  visible: true
  text: |-
    package antifraud.security

    import antifraud.model.User
    import org.springframework.security.core.GrantedAuthority
    import org.springframework.security.core.userdetails.UserDetails

    class SecurityUserDetails(
        @Transient private var user: User
    ) : UserDetails {
        override fun getAuthorities(): MutableCollection<out GrantedAuthority> = mutableListOf()
        override fun getPassword() = user.password

        override fun getUsername() = user.username

        override fun isAccountNonExpired() = true

        override fun isAccountNonLocked() = true

        override fun isCredentialsNonExpired() = true

        override fun isEnabled() = true
    }
  learner_created: true
- name: src/antifraud/model/Card.kt
  visible: true
  text: |-
    package antifraud.model

    import jakarta.persistence.*

    @Entity
    class Card(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "id", nullable = false) var id: Long? = null,
        @Column(name = "number", nullable = false) var number: String? = null,
    )
  learner_created: true
- name: src/antifraud/util/SetupDataLoader.kt
  visible: true
  text: |-
    package antifraud.util

    import antifraud.model.Privilege
    import antifraud.model.Role
    import antifraud.repository.PrivilegeRepository
    import antifraud.repository.RoleRepository
    import org.springframework.context.ApplicationListener
    import org.springframework.context.event.ContextRefreshedEvent
    import org.springframework.stereotype.Component
    import org.springframework.transaction.annotation.Transactional


    @Component
    open class SetupDataLoader(
        private val roleRepository: RoleRepository,
        private val privilegeRepository: PrivilegeRepository,
    ) : ApplicationListener<ContextRefreshedEvent> {
        private var alreadySetup = false

        @Transactional
        override fun onApplicationEvent(event: ContextRefreshedEvent) {
            if (alreadySetup) return

            //admin privileges
            val adminPrivilege = createPrivilegeIfNotFound("ADMIN_PRIVILEGE")
            val accessAdminPrivilege = createPrivilegeIfNotFound("ACCESS_ADMIN_PRIVILEGE")
            val editRolePrivilege = createPrivilegeIfNotFound("EDIT_ROLE_PRIVILEGE")
            val deleteUserPrivilege = createPrivilegeIfNotFound("DELETE_USER_PRIVILEGE")
            //support privileges
            val listUserPrivilege = createPrivilegeIfNotFound("LIST_USER_PRIVILEGE")
            val stolenCardPrivilege = createPrivilegeIfNotFound("STOLEN_CARD_PRIVILEGE")
            val suspiciousIpPrivilege = createPrivilegeIfNotFound("SUSPICIOUS_IP_PRIVILEGE")
            //transaction privileges
            val checkTransactionPrivilege = createPrivilegeIfNotFound("CHECK_TRANSACTION_PRIVILEGE")


            val merchantPrivileges = mutableSetOf(
                checkTransactionPrivilege
            )
            val supportPrivilege = mutableSetOf(
                listUserPrivilege,
                stolenCardPrivilege,
                suspiciousIpPrivilege,
            )

            val adminPrivileges = mutableSetOf(
                adminPrivilege,
                deleteUserPrivilege,
                accessAdminPrivilege,
                editRolePrivilege,
                listUserPrivilege
            )

            createRoleIfNotFound("ADMINISTRATOR", adminPrivileges)
            createRoleIfNotFound("SUPPORT", supportPrivilege)
            createRoleIfNotFound("MERCHANT", merchantPrivileges)

            alreadySetup = true
        }

        @Transactional
        open fun createPrivilegeIfNotFound(name: String?): Privilege {
            return privilegeRepository.save(
                privilegeRepository.findByName(name).orElse(Privilege(name = name))
            )
        }

        @Transactional
        open fun createRoleIfNotFound(name: String?, privileges: MutableSet<Privilege>?): Role {
            return roleRepository.save(
                roleRepository.findByName(name).orElse(Role(name = name, privileges = privileges))
            )
        }
    }
  learner_created: true
- name: src/antifraud/util/CardNumberValidator.kt
  visible: true
  text: |
    package antifraud.util

    object CardNumberValidator {
        private const val CARD_NUMBER_LENGTH = 16
        fun isValid(number: String): Boolean {
            return if (number.length == CARD_NUMBER_LENGTH) {
                try {
                    number.toLong()
                    LuhnAlgorithm.checksum(number)
                } catch (e: NumberFormatException) {
                    false
                }
            } else false
        }
    }
  learner_created: true
- name: src/antifraud/dto/UserDTO.kt
  visible: true
  text: |-
    package antifraud.dto

    import antifraud.model.User
    import com.fasterxml.jackson.annotation.JsonProperty
    import jakarta.validation.constraints.NotBlank
    import jakarta.validation.constraints.NotEmpty
    import jakarta.validation.constraints.Size
    import org.modelmapper.ModelMapper

    data class UserDTO(
        @field:NotBlank @field:NotEmpty @field:Size(min = 8, max = 50) @JsonProperty var id: Long? = null,
        @field:NotBlank @field:NotEmpty @field:Size(min = 8, max = 50) @JsonProperty var name: String? = null,
        @field:NotBlank @field:NotEmpty @field:Size(min = 8, max = 50) @JsonProperty var username: String? = null,
        @field:NotBlank @field:NotEmpty @field:Size(min = 8, max = 50) @JsonProperty var role: String? = null,
    ) {
        companion object {
            fun fromEntity(user: User): UserDTO {
                return ModelMapper().map(user, UserDTO::class.java).apply {
                    role = user.roles?.firstOrNull()?.name
                }
            }

            fun toEntity(userDto: UserDTO): User {
                return ModelMapper().map(userDto, User::class.java)
            }
        }
    }
  learner_created: true
- name: src/antifraud/model/Transaction.kt
  visible: true
  text: |-
    package antifraud.model

    import antifraud.util.TransactionValidationState
    import antifraud.util.TransactionValidationState.*
    import jakarta.persistence.*

    @Entity
    class Transaction(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "id", nullable = false) var id: Long? = null,
        @Column(name = "amount", nullable = false) var amount: Int? = null,
        @Column(name = "ip", nullable = false) var ip: String? = null,
        @Column(name = "number", nullable = false) var number: String? = null,
    ) {
        companion object {
            fun validateAmount(amount: Int?): TransactionValidationState {
                return when {
                    amount!! < 1 -> INVALID
                    amount in 1..200 -> ALLOWED
                    amount in 201..1500 -> MANUAL_PROCESSING
                    else -> PROHIBITED
                }
            }
        }
    }
  learner_created: true
- name: src/resources/docker-compose.yml
  visible: true
  text: |+
    services:
      db:
        container_name: postgres-db
        image: postgres:latest
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PGDATA: /data/postgres
        volumes:
          - db:/data/postgres
        ports:
          - '5332:5432'
        networks:
          - db
        restart: unless-stopped

    networks:
      db:
        driver: bridge

    volumes:
      db:

  learner_created: true
- name: src/antifraud/dto/LockUserDto.kt
  visible: true
  text: |-
    package antifraud.dto

    import com.fasterxml.jackson.annotation.JsonProperty
    import jakarta.validation.constraints.NotBlank
    import jakarta.validation.constraints.NotEmpty
    import jakarta.validation.constraints.NotNull
    import jakarta.validation.constraints.Size

    data class LockUserDto(
        @field:NotBlank @field:NotEmpty @field:Size(min = 8, max = 50) @JsonProperty var username: String? = null,
        @field:NotNull @field:NotBlank @field:NotEmpty var operation: String? = null,
    )
  learner_created: true
- name: src/antifraud/repository/RoleRepository.kt
  visible: true
  text: |-
    package antifraud.repository

    import antifraud.model.Role
    import org.springframework.data.jpa.repository.JpaRepository
    import org.springframework.stereotype.Repository
    import java.util.Optional

    @Repository
    interface RoleRepository : JpaRepository<Role, Long> {
        fun findByName(name: String?): Optional<Role>
    }
  learner_created: true
- name: src/antifraud/service/IpService.kt
  visible: true
  text: |-
    package antifraud.service

    import antifraud.repository.IpRepository
    import antifraud.model.Ip
    import org.springframework.stereotype.Service
    import kotlin.jvm.optionals.getOrNull

    @Service
    class IpService(
        private val ipRepository: IpRepository,
    ) {
        fun save(ip: Ip): Ip = ipRepository.save(ip)
        fun findByIp(ip: String): Ip? = ipRepository.findByIp(ip).getOrNull()
        fun existsByIp(ip: String): Boolean = ipRepository.existsByIp(ip)
        fun delete(ip: Ip) = ipRepository.delete(ip)
        fun findAll(): MutableList<Ip> = ipRepository.findAll()
    }
  learner_created: true
- name: src/antifraud/model/Ip.kt
  visible: true
  text: |-
    package antifraud.model

    import jakarta.persistence.*
    import org.hibernate.annotations.CreationTimestamp
    import org.hibernate.annotations.UpdateTimestamp
    import java.sql.Timestamp

    @Entity
    class Ip(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "id", nullable = false) var id: Long? = null,
        @Column(name = "ip", nullable = false) var ip: String? = null,
        @Column(name = "blocked", nullable = false) var blocked: Boolean = false,

        @CreationTimestamp @Column(name = "created_at", nullable = false) var createdAt: Timestamp? = null,
        @UpdateTimestamp @Column(name = "updated_at", nullable = false) var updatedAt: Timestamp? = null,
    )
  learner_created: true
- name: src/antifraud/repository/CardRepository.kt
  visible: true
  text: |-
    package antifraud.repository

    import antifraud.model.Card
    import org.springframework.data.jpa.repository.JpaRepository
    import org.springframework.stereotype.Repository
    import java.util.Optional

    @Repository
    interface CardRepository : JpaRepository<Card, Long> {
        fun findByNumber(number: String): Optional<Card>
        fun existsByNumber(number: String): Boolean
        fun deleteByNumber(number: String)
    }
  learner_created: true
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/antifraud/util/RegionSet.kt
  visible: true
  learner_created: true
- name: src/antifraud/dto/TransactionDTO.kt
  visible: true
  text: |-
    package antifraud.dto

    import antifraud.util.IpAddressUtil
    import jakarta.validation.constraints.*

    data class TransactionDto(
        @field:NotNull @field:NotBlank @field:NotEmpty var amount: Int,

        @field:NotNull @field:NotBlank @field:NotEmpty
        @field:Pattern(regexp = IpAddressUtil.IPV4_REGEX)
        var ip: String? = null,

        @field:NotNull @field:NotBlank @field:NotEmpty @field:Size(min = 16, max = 16) var number: String? = null,
    )
  learner_created: true
- name: src/antifraud/util/CardNumberConstraint.java
  visible: true
  learner_created: true
- name: src/antifraud/util/UserRoleConstraint.java
  visible: true
  learner_created: true
- name: src/antifraud/util/RegionConstraint.java
  visible: true
  learner_created: true
- name: src/antifraud/dto/NewUserDTO.kt
  visible: true
  learner_created: true
- name: src/antifraud/dto/UpdateUserRoleDTO.kt
  visible: true
  learner_created: true
- name: src/antifraud/controller/TransactionController.kt
  visible: true
  text: |+
    package antifraud.controller

    import antifraud.dto.TransactionDto
    import antifraud.util.TransactionValidationState.*
    import antifraud.model.Transaction
    import antifraud.service.CardService
    import antifraud.service.IpService
    import antifraud.util.CardNumberValidator
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.*
    import java.util.*

    @RestController
    class TransactionController(
        private val ipService: IpService,
        private val cardService: CardService,
    ) {
        data class ValidationResult(val result: String, val info: String)

        @PostMapping("/api/antifraud/transaction")
        fun validateTransaction(
            @RequestBody transactionDto: TransactionDto
        ): ResponseEntity<Any> {
            if (transactionDto.amount < 1) {
                return ResponseEntity.badRequest().body("amount must be greater than 0")
            }

            if (transactionDto.number?.let { CardNumberValidator.isValid(it) } == false) {
                return ResponseEntity.badRequest().body("invalid card number")
            }

            val invalidReasons = mutableListOf<String>()

            var transactionState = ALLOWED

            val suspiciousIp = transactionDto.ip?.let { ipService.findByIp(it) }
            if (suspiciousIp != null) {
                transactionState = PROHIBITED
                invalidReasons.add("ip")
            }

            val stolenCard = cardService.findByNumber(transactionDto.number!!)
            if (stolenCard != null) {
                transactionState = PROHIBITED
                invalidReasons.add("card-number")
            }

            val amountValidationState = Transaction.validateAmount(transactionDto.amount)
            if (amountValidationState == PROHIBITED) {
                transactionState = PROHIBITED
                invalidReasons.add("amount")
            } else if (amountValidationState == MANUAL_PROCESSING && transactionState != PROHIBITED) {
                transactionState = MANUAL_PROCESSING
                invalidReasons.add("amount")
            }

            return ResponseEntity.ok(
                ValidationResult(
                    transactionState.toString(),
                    if (transactionState == ALLOWED) "none" else invalidReasons.apply { sort() }.joinToString(", ")
                )
            )
        }
    }

  learner_created: true
- name: src/antifraud/service/TransactionService.kt
  visible: true
  learner_created: true
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");


            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 50

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 51

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 52

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 53

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 55

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 56

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 57

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 58

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 59

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 60

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 61

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 62

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 63

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 64

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 65

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 66

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 67

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 68


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 69

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 70

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 71

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 72

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 73

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 74

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 75

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 76

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 77

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 78

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 80

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 81

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 82

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 83

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 84

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 85

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 86

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 87

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 88

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 89

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 91

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 92

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 93

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 94

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 97

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 99 Thnx to E. Kovko

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 100

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 102
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 103

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 104


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 105

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 106

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 107

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 109

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 110

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 112

                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 113

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 114

        };
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: src/antifraud/repository/TransactionRepository.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18071#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 18 Jul 2023 11:09:36 UTC"
record: 5
